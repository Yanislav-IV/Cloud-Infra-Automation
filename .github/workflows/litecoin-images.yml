name: Litecoin Image Pipeline

on:
  push:
    branches:
      - master
    paths:
      - 'litecoin/**'

env:
  AWS_REGION: "us-east-1"
  AWS_ACCOUNT_ID: "298280266775"
  ECR_REPO_NAME: "project-litecoin"
  IMAGE_NAME: "litecoin"
  BINARY_NAME: "litecoind"
  BUILD_DIR: "litecoin/build"
  LITECOIN_VERSION: "0.21.3"

jobs:
  download_and_verify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download and verify Litecoin binary
        run: |
          set -e
          BASE_URL="https://download.litecoin.org/litecoin-${{ env.LITECOIN_VERSION }}"
          LITECOIN_BINARY="litecoin-${{ env.LITECOIN_VERSION }}-x86_64-linux-gnu.tar.gz"
          BINARY_URL="${BASE_URL}/linux/${LITECOIN_BINARY}"
          SHA256SUMS_URL="${BASE_URL}/SHA256SUMS"
          EXPECTED_SHA256="ea231c630e2a243cb01affd4c2b95a2be71560f80b64b9f4bceaa13d736aa7cb"
          mkdir -p ${{ env.BUILD_DIR }}
          curl -o ${{ env.BUILD_DIR }}/${LITECOIN_BINARY} -SL $BINARY_URL
          curl -o ${{ env.BUILD_DIR }}/SHA256SUMS -SL $SHA256SUMS_URL
          echo "${EXPECTED_SHA256}  ${{ env.BUILD_DIR }}/${LITECOIN_BINARY}" | sha256sum -c -
          tar -xzvf ${{ env.BUILD_DIR }}/${LITECOIN_BINARY} -C ${{ env.BUILD_DIR }} litecoin-${{ env.LITECOIN_VERSION }}/bin/${{ env.BINARY_NAME }}
          mv ${{ env.BUILD_DIR }}/litecoin-${{ env.LITECOIN_VERSION }}/bin/${{ env.BINARY_NAME }} ${{ env.BUILD_DIR }}/
          strip ${{ env.BUILD_DIR }}/${{ env.BINARY_NAME }}
          rm ${{ env.BUILD_DIR }}/${LITECOIN_BINARY}

      - name: Upload litecoind binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.BUILD_DIR }}/${{ env.BINARY_NAME }}

  build_al2:
    runs-on: ubuntu-latest
    needs: download_and_verify

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download litecoind binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.BUILD_DIR }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image (Amazon Linux 2)
        run: make -C litecoin docker-build LITECOIN_VERSION=${{ env.LITECOIN_VERSION }} IMAGE_NAME=${{ env.IMAGE_NAME }} TAG="al2-${{ env.LITECOIN_VERSION }}" DOCKER_FILE=Dockerfile.al2

      - name: Run Trivy Scan on AL2 Image
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${{ env.IMAGE_NAME }}:"al2-${{ env.LITECOIN_VERSION }}"

      - name: Tag and Push Amazon Linux 2 Docker image to ECR
        run: |
          IMAGE_TAG="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}:al2-${{ env.LITECOIN_VERSION }}"
          docker tag ${{ env.IMAGE_NAME }}:"al2-${{ env.LITECOIN_VERSION }}" $IMAGE_TAG
          docker push $IMAGE_TAG

  build_bb:
    runs-on: ubuntu-latest
    needs: download_and_verify

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download litecoind binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.BUILD_DIR }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image (BusyBox)
        run: make -C litecoin docker-build LITECOIN_VERSION=${{ env.LITECOIN_VERSION }} IMAGE_NAME=${{ env.IMAGE_NAME }} TAG="bb-${{ env.LITECOIN_VERSION }}" DOCKER_FILE=Dockerfile.bb

      - name: Tag and Push BusyBox Docker image to ECR
        run: |
          IMAGE_TAG="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}:bb-${{ env.LITECOIN_VERSION }}"
          docker tag ${{ env.IMAGE_NAME }}:"bb-${{ env.LITECOIN_VERSION }}" $IMAGE_TAG
          docker push $IMAGE_TAG
